// Mocks generated by Mockito 5.0.13 from annotations
// in search_calculate/test/calculate/presentation/cubit/calculate_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:bloc/bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:search_calculate/calculate/domain/usecases/filter_companies.dart'
    as _i5;
import 'package:search_calculate/home/domain/entities/company.dart' as _i6;
import 'package:search_calculate/home/presentation/cubit/home_cubit.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeHomeState extends _i1.Fake implements _i2.HomeState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i2.HomeCubit {
  MockHomeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeHomeState()) as _i2.HomeState);
  @override
  _i3.Stream<_i2.HomeState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i2.HomeState>.empty()) as _i3.Stream<_i2.HomeState>);
  @override
  _i3.StreamSubscription<_i2.HomeState> listen(
          void Function(_i2.HomeState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i2.HomeState>())
          as _i3.StreamSubscription<_i2.HomeState>);
  @override
  void emit(_i2.HomeState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i4.Change<_i2.HomeState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FilterCompanies].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterCompanies extends _i1.Mock implements _i5.FilterCompanies {
  MockFilterCompanies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Company> call(List<_i6.Company>? companies, String? query) =>
      (super.noSuchMethod(Invocation.method(#call, [companies, query]),
          returnValue: <_i6.Company>[]) as List<_i6.Company>);
  @override
  String toString() => super.toString();
}
